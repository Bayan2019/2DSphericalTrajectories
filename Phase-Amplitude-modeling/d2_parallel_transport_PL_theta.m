function dparq1_thetatheta = d2_parallel_transport_PL_theta(q1, x1, x2, theta)
% phi
phi = 2*asin(sqrt((1 - dot(x1,x2))/(1 + cos(theta)^2 -...
             dot(x1, x2)*sin(theta)^2)));  
if (phi <= pi/2)
 dparq1_thetatheta = d_parallel_transport_PL_theta2(q1, x1, x2, theta);
else
% normal
 normal = (x1 + x2)*sin(theta)/norm(x1 + x2) +...
          cross(x1, x2)*cos(theta)/norm(cross(x1, x2));
% derivative of 'phi' and 'normal' with respect to 'theta'
 Xix = dot(x1, x2); 
 dphi_theta = -(sin(2*theta)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2))/...
    ((1 - sin(theta)^2)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
 dnormal_theta = (x1 + x2)*cos(theta)/norm(x1 + x2) -...
     cross(x1, x2)*sin(theta)/norm(cross(x1, x2));
% second derivative with respect to 'theta' 
 d2_phi_theta = (2*(1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*...
    (Xix + 1)^(1/2)*(sin(theta)^2 + Xix*sin(theta)^2 + 2))/...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2)^2;
 d2_normal_theta = -normal;
% middle point on the segment (x1, x2)
 s = 1/2;
% beta = x1*cos(s*phi) + cross(normal, x1)*sin(s*phi) +...
%    n*dot(normal, x1)*(1-cos(s*phi));
 x12 = x1*cos(s*phi) + cross(normal, x1)*sin(s*phi) +...
    normal*dot(normal, x1)*(1 - cos(s*phi));
% the derivative of the middle point on the segment (x1, x2) 
% with respect to 'theta'
 x12_theta = -x1*sin(s*phi)*s*dphi_theta +...% the second term
     cross(dnormal_theta, x1)*sin(s*phi) +...
     cross(normal, x1)*cos(s*phi)*s*dphi_theta +...% the third term
     dnormal_theta*dot(normal, x1)*(1 - cos(s*phi)) +...
     normal*dot(dnormal_theta, x1)*(1 - cos(s*phi)) +...
     normal*dot(normal, x1)*sin(s*phi)*s*dphi_theta;
% the second derivative of the middle point on
% the segment (x1, x2) with respect to 'theta'
 x12_thetatheta = -(x1*cos(s*phi)*s*dphi_theta*s*dphi_theta +...
     x1*sin(s*phi)*s*d2_phi_theta) +...% the second term
     (cross(d2_normal_theta, x1)*sin(s*phi) +...
     cross(dnormal_theta, x1)*cos(s*phi)*s*dphi_theta) +...% the third term
     (cross(dnormal_theta, x1)*cos(s*phi)*s*dphi_theta -...
     cross(normal, x1)*sin(s*phi)*s*dphi_theta*s*dphi_theta +...
     cross(normal, x1)*cos(s*phi)*s*d2_phi_theta) +...% the fourth term
     (d2_normal_theta*dot(normal, x1)*(1 - cos(s*phi)) +...
     dnormal_theta*dot(dnormal_theta, x1)*(1 - cos(s*phi)) +...
     dnormal_theta*dot(normal, x1)*sin(s*phi)*s*dphi_theta) +... % the fifth term
     (dnormal_theta*dot(dnormal_theta, x1)*(1 - cos(s*phi)) +...
     normal*dot(d2_normal_theta, x1)*(1 - cos(s*phi)) +...
     normal*dot(dnormal_theta, x1)*sin(s*phi)*s*dphi_theta) +... % the final term
     (dnormal_theta*dot(normal, x1)*sin(s*phi)*s*dphi_theta +...
     normal*dot(dnormal_theta, x1)*sin(s*phi)*s*dphi_theta +...
     normal*dot(normal, x1)*cos(s*phi)*s*dphi_theta*s*dphi_theta +...
     normal*dot(normal, x1)*sin(s*phi)*s*d2_phi_theta);
 % parallel transport of 'q1' from 'x1' to 'x12' along 
 % the 'beta11' which is the first half of 'beta'
 % defined by angle between 'normal' and 'xx12'
 xx12 = (x1 + x12)/norm(x1 + x12);
 % the derivative of 'xx12' with respect to 'theta'
 xx12_theta = (x12_theta)/norm(x1 + x12) -...
     (x1 + x12)*dot(x1 + x12, x12_theta)/(norm(x1 + x12)^3);
 % the second derivative of 'xx12' with respect to 'theta'
 xx12_thetatheta = (x12_thetatheta)/norm(x1 + x12) -...
     x12_theta*dot(x1 + x12, x12_theta)/(norm(x1 + x12)^3) -...% the second term
     (x12_theta)*dot(x1 + x12, x12_theta)/(norm(x1 + x12)^3) -...
     (x1 + x12)*dot(x12_theta, x12_theta)/(norm(x1 + x12)^3) -...
     (x1 + x12)*dot(x1 + x12, x12_thetatheta)/(norm(x1 + x12)^3) +...
     (x1 + x12)*3*dot(x1 + x12, x12_theta)^2/(norm(x1 + x12)^5);
 % the anlge 'theta11' defining the 'beta11'
 theta11 = asin(dot(xx12, normal));
 % the derivative of theta11 with respect to theta
 theta11_theta = (dot(xx12_theta, normal) +...
     dot(xx12, dnormal_theta))/(1 - dot(xx12, normal)^2)^(1/2);
 % the second derivative of theta11 with respect to theta
 theta11_thetatheta = (dot(xx12_thetatheta, normal) +...
     dot(xx12_theta, dnormal_theta) +...
     dot(xx12_theta, dnormal_theta) +...
     dot(xx12, d2_normal_theta))/(1 - dot(xx12, normal)^2)^(1/2) +...
     (dot(xx12_theta, normal) +...
     dot(xx12, dnormal_theta))*...
     dot(xx12, normal)/(1 - dot(xx12, normal)^2)^(3/2);
 % the parallel tranport of 'q1' along the 'beta11'
 parq11 = parallel_transport_PL2(q1, x1, x12, theta11);
 % the derivative of 'parq11' with respect to 'theta'
 parq11_theta = d_parallel_transport_PL_x222(q1, x1, x12, theta11, x12_theta) +...
     d_parallel_transport_PL_theta2(q1, x1, x12, theta11)*theta11_theta;
 % the second derivative of parq11 with respect to theta
 parq11_thetatheta = d2_parallel_transport_PL_x2(q1, x1, x12, theta11, x12_theta, x12_theta) +...
     d2_parallel_transport_PL_xutheta2(q1, x1, x12, theta11, x12_theta)*theta11_theta +...
     d_parallel_transport_PL_x222(q1, x1, x12, theta11, x12_thetatheta) +...
     d2_parallel_transport_PL_xutheta2(q1, x1, x12, theta11, x12_theta)*theta11_theta +...
     d2_parallel_transport_PL_theta2(q1, x1, x12, theta11)*theta11_theta*theta11_theta +...
     d_parallel_transport_PL_theta2(q1, x1, x12, theta11)*theta11_thetatheta;
 % parallel transport of 'parq11' from 'x12' to 'x2' along 
 % the 'beta22' which is the second half of 'beta'
 % defined by angle between 'normal' and 'xx12' 
 xx12 = (x12 + x2)/norm(x12 + x2);
 % the derivative of 'xx12' with respect to 'theta'
 xx12_theta = (x12_theta)/norm(x12 + x2) -...
     (x12 + x2)*dot(x12 + x2, x12_theta)/(norm(x12 + x2)^3);
 % the second derivative of 'xx12' with respect to 'theta'
 xx12_thetatheta = (x12_thetatheta)/norm(x12 + x2) -...
     x12_theta*dot(x12 + x2, x12_theta)/(norm(x12 + x2)^3) -...% the second term
     (x12_theta)*dot(x12 + x2, x12_theta)/(norm(x12 + x2)^3) -...
     (x12 + x2)*dot(x12_theta, x12_theta)/(norm(x12 + x2)^3) -...
     (x12 + x2)*dot(x12 + x2, x12_thetatheta)/(norm(x12 + x2)^3) +...
     (x12 + x2)*3*dot(x12 + x2, x12_theta)^2/(norm(x12 + x2)^5);
 % the anlge 'theta22' defining the 'beta22'
 theta22 = asin(dot(xx12, normal));
 % the derivative of 'theta22' with respect to 'theta'
 theta22_theta = (dot(xx12_theta, normal) +...
     dot(xx12, dnormal_theta))/(1 - dot(xx12, normal)^2)^(1/2);
 % the second derivative of 'theta22' with respect to 'theta'
 theta22_thetatheta = (dot(xx12_thetatheta, normal) +...
     dot(xx12_theta, dnormal_theta) +...
     dot(xx12_theta, dnormal_theta) +...
     dot(xx12, d2_normal_theta))/(1 - dot(xx12, normal)^2)^(1/2) +...
     (dot(xx12_theta, normal) +...
     dot(xx12, dnormal_theta))^2*...
     dot(xx12, normal)/(1 - dot(xx12, normal)^2)^(3/2);
 % the final parallel transport of 'parq11' from 'x12' to 'x2' 
 % parq1 = parallel_transport_PL2(parq11, x12, x2, theta22);
 % the derivative of 'parq1' with respect to 'theta'
 % dparq1_theta = parallel_transport_PL2(parq11_theta, x12, x2, theta22) +...
 %    d_parallel_transport_PL_x122(parq11, x12, x2, theta22, x12_theta) +...
 %    d_parallel_transport_PL_theta2(parq11, x12, x2, theta22)*theta22_theta;
 % the second derivative of 'parq1' with respect to 'theta'
 dparq1_thetatheta = parallel_transport_PL2(parq11_thetatheta, x12, x2, theta22) +...
     d_parallel_transport_PL_x122(parq11_theta, x12, x2, theta22, x12_theta) +...
     d_parallel_transport_PL_theta2(parq11_theta, x12, x2, theta22)*theta22_theta +...% the second term
     d_parallel_transport_PL_x122(parq11_theta, x12, x2, theta22, x12_theta) +...
     d2_parallel_transport_PL_x1(parq11, x12, x2, theta22, x12_theta, x12_theta) +...
     d2_parallel_transport_PL_xiutheta2(parq11, x12, x2, theta22, x12_theta)*theta22_theta +...% the final term
     d_parallel_transport_PL_theta2(parq11_theta, x12, x2, theta22)*theta22_theta +...
     d2_parallel_transport_PL_xiutheta2(parq11, x12, x2, theta22, x12_theta)*theta22_theta +...
     d2_parallel_transport_PL_theta2(parq11, x12, x2, theta22)*theta22_theta*theta22_theta +...
     d_parallel_transport_PL_theta2(parq11, x12, x2, theta22)*theta22_thetatheta;
end
end

function parq111 = parallel_transport_PL2(q1, x1, x2, theta)
% parallel transport of vector 'q1' 
% from the tangent space at 'x1'
% to the tangent space at 'x2' 
% along the p-optimal baseline 'beta' 
% determined by the angle 'theta'
alpha = acos(sin(theta)*sqrt((1 + dot(x1, x2))/2));
phi = 2*asin(sqrt((1 - dot(x1, x2))/(1 + cos(theta)^2 -...
             dot(x1, x2)*sin(theta)^2)));
normal = (x1 + x2)*sin(theta)/norm(x1 + x2) +...
     cross(x1, x2)*cos(theta)/norm(cross(x1, x2));
% direction of the p-optimal curve at the beginning
dbeta0 = -x1*phi*sin(0) + cross(normal, x1)*phi*cos(0) +...
       normal*dot(normal, x1)*phi*sin(0);
if (dot(cross(cross(normal, x1), normal), x1)>0)
 e1 = cross(cross(normal, x1), normal)/norm(cross(normal, x1));
else
 e1 = -cross(cross(normal, x1), normal)/norm(cross(normal, x1));
end
if (dot(cross(normal, x1), dbeta0)>0)
 e2 = cross(normal, x1)/norm(cross(normal, x1));
else
 e2 = -cross(normal, x1)/norm(cross(normal, x1)); 
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1= -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
T = size(q1, 2);
parq111 = q1;
for j=1:T
 parq111(:, j) = dot(e2, q1(:, j))*v +...
     dot(cross(e2, x1), q1(:, j))*cross(v, x2);
end
end

% the first derivatives

function dparq1_theta = d_parallel_transport_PL_theta2(q1, x1, x2, theta)
% differential of parallel transport of vector 'v1' from the tangent space at 'x1'
% to the tangent space at 'x2'
% along the p-optimal curve defined by the angle 'theta'
if (x1 == x2)
    dparq1_theta = 0*q1;
else    
T = size(q1, 2);
% 'alpha', 'phi', and 'normal'
alpha = acos(sin(theta)*sqrt((1+dot(x1, x2))/2));
phi = 2*asin(sqrt((1 - dot(x1, x2))/(1 + cos(theta)^2 -...
             dot(x1, x2)*sin(theta)^2)));
normal = (x1 + x2)*sin(theta)/norm(x1 + x2) +...
     cross(x1, x2)*cos(theta)/norm(cross(x1, x2));
% direction of the p-optimal curve at the beginning
dbeta0 = -x1*phi*sin(0) + cross(normal, x1)*phi*cos(0) +...
       normal*dot(normal, x1)*phi*sin(0);
% derivatives of 'alpha', 'phi', and 'normal' with respect to 'theta'
Xix = dot(x1, x2);
dalpha_theta = -(cos(theta)*(Xix/2 + 1/2)^(1/2))/...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2); 
dphi_theta = -(sin(2*theta)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2))/...
    ((1 - sin(theta)^2)^(1/2)*(sin(theta)^2 + Xix*sin(theta)^2 - 2));
dnormal_theta = (x1+x2)*cos(theta)/norm(x1+x2) -...
     cross(x1,x2)*sin(theta)/norm(cross(x1,x2));
% 'ee2' 
ee2 = cross(normal, x1)/norm(cross(normal, x1));
% the derivative of 'ee2' with respect to 'theta'
dee2_theta = cross(dnormal_theta, x1)/norm(cross(normal, x1)) -...
     cross(normal, x1)*...
     dot(cross(dnormal_theta, x1), cross(normal, x1))/...
     norm(cross(normal, x1))^3;
% 'e2' and the derivative of 'e2' with respect to 'theta' 
if (dot(cross(normal, x1), dbeta0) > 0)
    e2 = ee2;
    de2_theta = dee2_theta;
else
    e2 = -ee2;
    de2_theta = -dee2_theta;
end
% 'e1' and the derivative of 'e1' with respect to 'theta' 
if (dot(cross(cross(normal, x1), normal), x1)>0)
    e1 = cross(ee2, normal);
    de1_theta = cross(dee2_theta, normal) +...
        cross(ee2, dnormal_theta);
else
    e1 = -cross(ee2, normal);
    de1_theta = -cross(dee2_theta, normal) -...
        cross(ee2, dnormal_theta);
end    
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% derivatives of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% derivatives of 'v1', 'v2', and 'v3' with respect to 'theta'
dv3_theta = dv3_alpha*dalpha_theta + dv3_phi*dphi_theta;
dv2_theta = dv2_alpha*dalpha_theta + dv2_phi*dphi_theta;
dv1_theta = dv1_alpha*dalpha_theta + dv1_phi*dphi_theta;
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% the derivative of 'v' with respect to 'theta'
dv_theta = dv1_theta*e1 + dv2_theta*e2 + dv3_theta*normal +...
            v1*de1_theta + v2*de2_theta + v3*dnormal_theta;
dparq1_theta = q1;
for j=1:T
   %{ 
     parq1(:, j) = dot(e2, q1(:, j))*v +...
     dot(cross(e2, x1), q1(:, j))*cross(v, x2);
   %}
 dparq1_theta(:, j) = dot(de2_theta, q1(:, j))*v +...
     dot(e2, q1(:, j))*dv_theta +...
     dot(cross(de2_theta, x1), q1(:, j))*cross(v, x2) +...
     dot(cross(e2, x1), q1(:, j))*cross(dv_theta, x2);
end
end
end

function dparqi_xiu = d_parallel_transport_PL_x122(qi, xi, x, theta, uu)
% differential of parallel transport of curve 'qi' 
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 'beta'
% defined by the angle 'theta'
% with respect to 'xi' 
% along the direction 'uu'
T = size(qi, 2);
% 'alpha', 'phi', 'normal', and 'ee2'
alpha = acos(sin(theta)*sqrt((1 + dot(xi, x))/2));
phi = 2*asin(sqrt((1 - dot(xi, x))/(1 + cos(theta)^2 -...
             dot(xi, x)*sin(theta)^2)));
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
ee2 = cross(normal, xi)/norm(cross(normal, xi));
% direction of the p-optimal curve 'beta' at the beginning
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0);
% differentials of 'alpha', 'phi', 'normal', and 'ee2'
% with respect to 'xi' along the direction 'uu'
Xix = dot(xi, x);
dalpha_xiu = -sin(theta)*dot(uu, x)/...
    (4*(Xix/2 + 1/2)^(1/2)*(1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2)); 
dphi_xiu = -(2*sin(theta)^2 - 2)*dot(uu, x)/...
    ((1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
dnormal_xiu = uu*(sin(theta)/norm(xi + x)) -...
   (xi + x)*(sin(theta)/norm(xi + x)^3)*dot(xi + x, uu) +...% the second term
   cross(uu, x)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*(cos(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(uu, x));
dee2_xiu = (cross(dnormal_xiu, xi) + cross(normal, uu))/...
    norm(cross(normal, xi)) -...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xiu, xi) +...
    cross(normal, uu))/norm(cross(normal, xi))^3;
% differentials of 'e2' and 'e1' with respect to 'xi'
% along the direction 'uu'
if (dot(cross(normal, xi), dbeta0) > 0)
   e2 = ee2;
   de2_xiu = dee2_xiu;
else
   e2 = -ee2;
   de2_xiu = -dee2_xiu;
end
if (dot(cross(cross(normal, xi), normal), xi)>0)
    e1 = cross(ee2, normal);
    de1_xiu = cross(dee2_xiu, normal) + cross(ee2, dnormal_xiu);
else
    e1 = -cross(ee2, normal);
    de1_xiu = -cross(dee2_xiu, normal) - cross(ee2, dnormal_xiu);
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% differentials of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% differentials of 'v1', 'v2', and 'v3' with respect to 'xi'
% along the direction 'uu'
dv3_xiu = dv3_alpha*dalpha_xiu + dv3_phi*dphi_xiu;
dv2_xiu = dv2_alpha*dalpha_xiu + dv2_phi*dphi_xiu;
dv1_xiu = dv1_alpha*dalpha_xiu + dv1_phi*dphi_xiu;
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% differential of 'v' with respect to 'xi'
% along the direction 'uu'
dv_xiu = dv1_xiu*e1 + dv2_xiu*e2 + dv3_xiu*normal +...
            +v1*de1_xiu + v2*de2_xiu + v3*dnormal_xiu;
% differential of parallel transport of 'qi' with respect to 'xi'
% along the direction 'uu'
dparqi_xiu = zeros(3, T);
for j=1:T
   %{ 
     parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
   %}
 dparqi_xiu(:, j) = dot(de2_xiu, qi(:, j))*v +...
     dot(e2, qi(:, j))*dv_xiu +...% the second term
     dot(cross(de2_xiu, xi), qi(:, j))*cross(v, x) +...
     dot(cross(e2, uu), qi(:, j))*cross(v, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_xiu, x);
end
end

function dparqi_xu = d_parallel_transport_PL_x222(qi, xi, x, theta, uu)
% differential of parallel transport of curve 'qi' 
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 
% defined by the angle 'theta'
% with respect to 'x'
% along the direction 'uu'
T = size(qi, 2);
% 'alpha', 'phi', 'normal', and 'ee2'
alpha = acos(sin(theta)*sqrt((1 + dot(xi, x))/2));
phi = 2*asin(sqrt((1 - dot(xi, x))/(1 + cos(theta)^2 -...
             dot(xi, x)*sin(theta)^2)));
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
ee2 = cross(normal, xi)/norm(cross(normal, xi));
% direction of the p-optimal curve 'beta' at the beginning
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0);
% differentials of 'alpha', 'phi', 'normal', and 'ee2'
% with respect to 'x'
% along the direction 'uu'
Xix = dot(xi, x);
dalpha_xu = -sin(theta)*dot(xi, uu)/...
    (4*(Xix/2 + 1/2)^(1/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2)); 
dphi_xu = -(2*sin(theta)^2 - 2)*dot(xi, uu)/...
    ((1 - sin(theta)^2)^(1/2)*...
    (1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
dnormal_xu = uu*(sin(theta)/norm(xi + x)) -...
   (xi + x)*(sin(theta)/norm(xi + x)^3)*dot(xi + x, uu) +...% the second term
   cross(xi, uu)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*(cos(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(xi, uu));
dee2_xu = cross(dnormal_xu, xi)/norm(cross(normal, xi)) -...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xu, xi))/...
    norm(cross(normal, xi))^3;
% differentials of 'e2' and 'e1' with respect to 'x'
% along the direction 'uu'
if (dot(cross(normal, xi), dbeta0) > 0)
   e2 = ee2;
   de2_xu = dee2_xu;
else
   e2 = -ee2;
   de2_xu = -dee2_xu;
end
if (dot(cross(cross(normal, xi), normal), xi) > 0)
    e1 = cross(ee2, normal);
    de1_xu = cross(dee2_xu, normal) + cross(ee2, dnormal_xu);
else
    e1 = -cross(ee2, normal);
    de1_xu = -cross(dee2_xu, normal) - cross(ee2, dnormal_xu);
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% differentials of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% differentials of 'v1', 'v2', and 'v3' with respect to 'x'
% along the direction 'uu'
dv3_xu = dv3_alpha*dalpha_xu + dv3_phi*dphi_xu;
dv2_xu = dv2_alpha*dalpha_xu + dv2_phi*dphi_xu;
dv1_xu = dv1_alpha*dalpha_xu + dv1_phi*dphi_xu;
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% differential of 'v' with respect to 'x'
% along the direction 'uu'
dv_xu = dv1_xu*e1 + dv2_xu*e2 + dv3_xu*normal +...
            +v1*de1_xu + v2*de2_xu + v3*dnormal_xu;
% differential of parallel transport of 'qi' with respect to 'x'
% along the direction 'uu'        
dparqi_xu = zeros(3, T);
for j=1:T
   %{ 
     parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
   %}
 dparqi_xu(:, j) = dot(de2_xu, qi(:, j))*v +...
    dot(e2, qi(:, j))*dv_xu +...% the second term
    dot(cross(de2_xu, xi), qi(:, j))*cross(v, x) +...
    dot(cross(e2, xi), qi(:, j))*cross(dv_xu, x) +...
    dot(cross(e2, xi), qi(:, j))*cross(v, uu);
end
end

% the second derivatives (the hard ones)

function d2parqi_theta = d2_parallel_transport_PL_theta2(qi, xi, x, theta)
% the second differential of parallel transport of vector 'qi' 
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 'beta' 
% defined by the angle 'theta'
% with respect to 'theta'
if (xi == x)
    d2parqi_theta = 0*qi;
else    
T = size(qi, 2);
% 'alpha', 'phi', and 'normal'
alpha = acos(sin(theta)*sqrt((1 + dot(xi, x))/2));
phi = 2*asin(sqrt((1 - dot(xi, x))/(1 + cos(theta)^2 -...
             dot(xi, x)*sin(theta)^2)));
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
% direction of the p-optimal curve 'beta' at the beginning
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0);
% first derivative of 'alpha', 'phi', and 'normal'
% with respect to 'theta'
Xix = dot(xi, x);
dalpha_theta = -(cos(theta)*(Xix/2 + 1/2)^(1/2))/...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2); 
dphi_theta = -(sin(2*theta)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2))/...
    ((1 - sin(theta)^2)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
dnormal_theta = (xi + x)*cos(theta)/norm(xi + x) -...
     cross(xi, x)*sin(theta)/norm(cross(xi, x));
% second derivatives of 'alpha', 'phi', and 'normal'
% with respect to 'theta'
d2_alpha_theta = -(2*sin(theta)*(Xix/2 - 1/2)*(Xix + 1)^(1/2))/...
    (- sin(theta)^2 - Xix*sin(theta)^2 + 2)^(3/2); 
d2_phi_theta = (2*(1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*...
    (Xix + 1)^(1/2)*(sin(theta)^2 + Xix*sin(theta)^2 + 2))/...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2)^2;
d2_normal_theta = -normal;
% ee2, dee2_theta, and d2_ee2_theta
ee2 = cross(normal, xi)/norm(cross(normal, xi));
% derivative of 'ee2' with respect to 'theta'
dee2_theta = cross(dnormal_theta, xi)/norm(cross(normal, xi)) -...
  cross(normal, xi)*...
  dot(cross(dnormal_theta, xi), cross(normal, xi))/...
  norm(cross(normal, xi))^3;
% second derivative of 'ee2' with respect to 'theta'
d2_ee2_theta = cross(d2_normal_theta, xi)/norm(cross(normal, xi)) -...
  cross(dnormal_theta, xi)*...
  dot(cross(dnormal_theta, xi), cross(normal, xi))/...
  norm(cross(normal, xi))^3 -...% the second term
  (cross(dnormal_theta, xi)*...
  dot(cross(dnormal_theta, xi), cross(normal, xi))/...
  norm(cross(normal, xi))^3 +...
  cross(normal, xi)*...
  dot(cross(d2_normal_theta, xi), cross(normal, xi))/...
  norm(cross(normal, xi))^3 +...
  cross(normal, xi)*...
  dot(cross(dnormal_theta, xi), cross(dnormal_theta, xi))/...
  norm(cross(normal, xi))^3 -...
  cross(normal, xi)*...
  3*dot(cross(dnormal_theta, xi), cross(normal, xi))^2/...
  norm(cross(normal, xi))^5);
 % first and second derivatives of 'e2' and 'e1'
 % with respect to 'theta'
 if (dot(cross(normal, xi), dbeta0) > 0)
   e2 = ee2;
   de2_theta = dee2_theta;
   d2_e2_theta = d2_ee2_theta;
 else
   e2 = -ee2;
   de2_theta = -dee2_theta;
   d2_e2_theta = -d2_ee2_theta;
 end
 if (dot(cross(cross(normal, xi), normal), xi) > 0)
    e1 = cross(ee2, normal);
    de1_theta = cross(dee2_theta, normal) +...
        cross(ee2, dnormal_theta);
    d2_e1_theta = cross(d2_ee2_theta, normal) +...
        cross(dee2_theta, dnormal_theta) +...
        cross(dee2_theta, dnormal_theta) +...
        cross(ee2, d2_normal_theta);
 else
    e1 = -cross(ee2, normal);
    de1_theta = -cross(dee2_theta, normal) -...
        cross(ee2, dnormal_theta);
    d2_e1_theta = -cross(d2_ee2_theta, normal) -...
        cross(dee2_theta, dnormal_theta) -...
        cross(dee2_theta, dnormal_theta) -...
        cross(ee2, d2_normal_theta);
  end
 % coefficient of vector 'v' (parallel transport of 'e2')
 % with basis 'e1', 'e2', and 'normal'
 % 'v1', 'v2', and 'v3'
 v3 = -sin(alpha)*sin(phi*cos(alpha));
 v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
 v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
 % differentials of 'v1', 'v2', and 'v3' with respect to
 % 'alpha' and 'phi' 
 dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
 dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
 dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
 dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
 dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
 dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
 % differentials of 'v1', 'v2', and 'v3' with respect to 'theta'
 dv3_theta = dv3_alpha*dalpha_theta + dv3_phi*dphi_theta;
 dv2_theta = dv2_alpha*dalpha_theta + dv2_phi*dphi_theta;
 dv1_theta = dv1_alpha*dalpha_theta + dv1_phi*dphi_theta;
 % the vector 'v'
 v = v1*e1 + v2*e2 + v3*normal;
 % therefore 'v' and first derivative of 'v'
 % with respect to 'theta'
 dv_theta = dv1_theta*e1 + dv2_theta*e2 + dv3_theta*normal +...
            +v1*de1_theta + v2*de2_theta + v3*dnormal_theta;
 % Hessians of 'v1', 'v2', and 'v3' with respect to 
 % 'alpha' and 'phi'
 d2v3_alphaalpha = sin(alpha)*(sin(phi*cos(alpha)) +...
    phi^2*sin(phi*cos(alpha))*sin(alpha)^2 +...
    3*phi*cos(alpha)*cos(phi*cos(alpha)));
 d2v3_alphaphi = sin(alpha)^2*cos(phi*cos(alpha)) -...
    cos(alpha)^2*cos(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2;
 d2v3_phiphi = sin(phi*cos(alpha))*cos(alpha)^2*sin(alpha);
 d2v2_alphaalpha = phi*sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi^2*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*sin(phi)*cos(phi*cos(alpha)) +...
    2*phi*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2*sin(phi);
 d2v2_alphaphi = -sin(alpha)*sin(phi)*(2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) - phi*sin(phi*cos(alpha))*cos(alpha)^2);
 d2v2_phiphi = (cos(alpha)^2 - 1)*(cos(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi));
 d2v1_alphaalpha = phi^2*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*cos(phi)*cos(phi*cos(alpha)) +...
    2*phi*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*cos(phi)*sin(alpha)^2;
 d2v1_alphaphi = -cos(phi)*sin(alpha)*(2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) - phi*sin(phi*cos(alpha))*cos(alpha)^2);
 d2v1_phiphi = -(cos(alpha)^2 - 1)*(sin(phi)*cos(phi*cos(alpha)) +...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi));
 % second derivatives 'v1', 'v2', and 'v3'
 % with respect to 'theta'
 d2_v3_theta = d2v3_alphaalpha*dalpha_theta^2 +...
    2*d2v3_alphaphi*dalpha_theta*dphi_theta +...
    dv3_alpha*d2_alpha_theta +...
    d2v3_phiphi*dphi_theta^2 + dv3_phi*d2_phi_theta;
 d2_v2_theta = d2v2_alphaalpha*dalpha_theta^2 +...
    2*d2v2_alphaphi*dalpha_theta*dphi_theta +...
    dv2_alpha*d2_alpha_theta +...
    d2v2_phiphi*dphi_theta^2 + dv2_phi*d2_phi_theta;
 d2_v1_theta = d2v1_alphaalpha*dalpha_theta^2 +...
    2*d2v1_alphaphi*dalpha_theta*dphi_theta +...
    dv1_alpha*d2_alpha_theta +...
    d2v1_phiphi*dphi_theta^2 + dv1_phi*d2_phi_theta;
 % the vector 'v'
 % v = v1*e1 + v2*e2 + v3*normal;
 % therefore 'v' and first derivative of 'v'
 % with respect to 'theta'
 % dv_theta = dv1_theta*e1 + dv2_theta*e2 + dv3_theta*normal +...
 %           +v1*de1_theta + v2*de2_theta + v3*dnormal_theta;
 % the second derivatives of 'v' with respect to 'theta'
 d2_v_theta = d2_v1_theta*e1 + d2_v2_theta*e2 + d2_v3_theta*normal +...
            2*(dv1_theta*de1_theta + dv2_theta*de2_theta +...
            dv3_theta*dnormal_theta) +...
            v1*d2_e1_theta + v2*d2_e2_theta + v3*d2_normal_theta;
 % finally
 d2parqi_theta = qi;
 for j=1:T
 %{ 
  parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
  dparqi_theta(:, j) = dot(de2_theta, qi(:, j))*v +...
     dot(e2, qi(:, j))*dv_theta +...
     dot(cross(de2_theta, xi), qi(:, j))*cross(v, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_theta, x);
 %}
 d2parqi_theta(:, j) = dot(d2_e2_theta, qi(:, j))*v +...
     dot(de2_theta, qi(:, j))*dv_theta +...% the second term
     dot(de2_theta, qi(:, j))*dv_theta +...
     dot(e2, qi(:, j))*d2_v_theta +...% the third term
     dot(cross(d2_e2_theta, xi), qi(:, j))*cross(v, x) +...
     dot(cross(de2_theta, xi), qi(:, j))*cross(dv_theta, x) +...% the final term
     dot(cross(de2_theta, xi), qi(:, j))*cross(dv_theta, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(d2_v_theta, x);
 end
end
end

function d2parqi_xiutheta = d2_parallel_transport_PL_xiutheta2(qi, xi, x, theta, uu)
% second differential of parallel transport of curve 'qi' 
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 'beta'
% defined by the angle 'theta'
% with respect to 'theta' and 'xi' 
% along the direction 'uu' (the resulting matrix (3xT))
T = size(qi, 2);
% 'alpha' and 'phi'
alpha = acos(sin(theta)*sqrt((1 + dot(xi, x))/2));
phi = 2*asin(sqrt((1 - dot(xi, x))/(1 + cos(theta)^2 -...
             dot(xi, x)*sin(theta)^2)));
% derivative of 'alpha' and 'phi' with respect to 'theta'
Xix = dot(xi, x);
dalpha_theta = -(cos(theta)*(Xix/2 + 1/2)^(1/2))/...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2); 
dphi_theta = -(sin(2*theta)*(1 - Xix)^(1/2)*...
    (Xix + 1)^(1/2))/...
    ((1 - sin(theta)^2)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
% gradient of 'alpha' and 'phi' with respect to 'xi'
% along the direction 'uu' 
dalpha_xiu = -sin(theta)*dot(uu, x)/...
    (4*(Xix/2 + 1/2)^(1/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2)); 
dphi_xiu = -(2*sin(theta)^2 - 2)*dot(uu, x)/...
    ((1 - sin(theta)^2)^(1/2)*...
    (1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
% second derivative of 'alpha' and 'phi' 
% with respect to 'xi' along the direction 'uu' and 'theta'
d2_alpha_xiutheta = ((cos(theta)*(sin(theta)^2*...
    (Xix/2 + 1/2) - 1) -...
    cos(theta)*sin(theta)^2*(Xix/2 + 1/2))/...
    (4*(Xix/2 + 1/2)^(1/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(3/2)))*dot(uu, x); 
d2_phi_xiutheta = ((cos(theta)*sin(theta)*...
    (2*Xix + 2)*(sin(theta)^2 -...
    2*Xix + Xix*sin(theta)^2))/...
    ((1 - sin(theta)^2)^(1/2)*...
    (1 - Xix)^(1/2)*(Xix + 1)^(3/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2)^2))*dot(uu, x);
% normal
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
% direction of the p-optimal curve 'beta' at the beginning
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0);
% derivative of 'normal' with respect to 'theta'
dnormal_theta = (xi + x)*cos(theta)/norm(xi + x) -...
     cross(xi, x)*sin(theta)/norm(cross(xi, x));
% differential of 'normal' with respect to 'xi'
% along the direction 'uu'
dnormal_xiu = uu*(sin(theta)/norm(xi + x)) -...
   (xi + x)*(sin(theta)/norm(xi + x)^3)*dot(xi + x, uu) +...% second term
   cross(uu, x)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*(cos(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(uu, x));
% second derivative of 'normal' with respect to 'xi' 
% along the direction 'uu' and 'theta'
d2_normal_xiutheta = uu*(cos(theta)/norm(xi + x)) -...
   (xi + x)*(cos(theta)/norm(xi + x)^3)*dot(xi + x, uu) -...
   cross(uu, x)*(sin(theta)/norm(cross(xi, x))) +...
   cross(xi, x)*(sin(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(uu, x));
% ee2
ee2 = cross(normal, xi)/norm(cross(normal, xi));
% derivative of 'ee2' with respect to 'theta'
dee2_theta = cross(dnormal_theta, xi)/norm(cross(normal, xi)) -...
     cross(normal, xi)*...
     dot(cross(dnormal_theta, xi), cross(normal, xi))/...
     norm(cross(normal, xi))^3;
% differential of 'ee2' with respect to 'xi'
% along the direction 'uu'
dee2_xiu = (cross(dnormal_xiu, xi) +...
    cross(normal, uu))/norm(cross(normal, xi)) -...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xiu, xi) +...
    cross(normal, uu))/norm(cross(normal, xi))^3;
% second derivative of 'ee2' with respect to 'xi' and 'theta'
d2_ee2_xiutheta = (cross(d2_normal_xiutheta, xi) +...
    cross(dnormal_theta, uu))/norm(cross(normal, xi)) -...
    (cross(dnormal_xiu, xi) + cross(normal, uu))*...
    dot(cross(normal, xi), cross(dnormal_theta, xi))/...
    norm(cross(normal, xi))^3 -... % the second term
    (cross(dnormal_theta, xi)*...
    dot(cross(normal, xi), cross(dnormal_xiu, xi) +...
    cross(normal, uu))/norm(cross(normal, xi))^3 +...
    cross(normal, xi)*...
    dot(cross(dnormal_theta, xi), cross(dnormal_xiu, xi) +...
    cross(normal, uu))/norm(cross(normal, xi))^3 +...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(d2_normal_xiutheta, xi) +...
    cross(normal, uu))/norm(cross(normal, xi))^3 +...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xiu, xi) +...
    cross(dnormal_theta, uu))/norm(cross(normal, xi))^3 -...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xiu, xi) +...
    cross(normal, uu))*...
    dot(cross(normal, xi), cross(dnormal_theta, xi))/...
    norm(cross(normal, xi))^5);
% derivative and differential of 'e2' and 'e1' 
% with respect to 'theta' and 'xi' 
% along the direction 'uu'
% and second derivative of 'e2' and 'e1' 
% with respect to 'xi' 
% along the direction 'uu' and 
% 'theta' correspondingly
if (dot(cross(normal, xi), dbeta0) > 0)
   e2 = ee2;
   de2_theta = dee2_theta;
   de2_xiu = dee2_xiu;
   d2_e2_xiutheta = d2_ee2_xiutheta;
else
   e2 = -ee2;
   de2_theta = -dee2_theta;
   de2_xiu = -dee2_xiu;
   d2_e2_xiutheta = -d2_ee2_xiutheta;
end
if (dot(cross(cross(normal, xi), normal), xi) > 0)
    e1 = cross(ee2, normal);
    de1_theta = cross(dee2_theta, normal) +...
        cross(ee2, dnormal_theta);
    de1_xiu = cross(dee2_xiu, normal) + cross(ee2, dnormal_xiu);
    d2_e1_xiutheta = cross(d2_ee2_xiutheta, normal) +...
        cross(dee2_xiu, dnormal_theta) +...% the second term
        cross(dee2_theta, dnormal_xiu) +...
        cross(ee2, d2_normal_xiutheta);
else
    e1 = -cross(ee2, normal);
    de1_theta = -cross(dee2_theta, normal) -...
        cross(ee2, dnormal_theta);
    de1_xiu = -cross(dee2_xiu, normal) - cross(ee2, dnormal_xiu);
    d2_e1_xiutheta = -cross(d2_ee2_xiutheta, normal) -...
        cross(dee2_xiu, dnormal_theta) -...% the second term
        cross(dee2_theta, dnormal_xiu) -...
        cross(ee2, d2_normal_xiutheta);
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha)) +...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha)) +...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% differentials of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% derivatives of 'v1', 'v2', and 'v3'
% with respect to 'theta' 
dv3_theta = dv3_alpha*dalpha_theta + dv3_phi*dphi_theta;
dv2_theta = dv2_alpha*dalpha_theta + dv2_phi*dphi_theta;
dv1_theta = dv1_alpha*dalpha_theta + dv1_phi*dphi_theta;
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% therefore 'v' and first derivative of 'v'
% with respect to 'theta'
dv_theta = dv1_theta*e1 + dv2_theta*e2 + dv3_theta*normal +...
            +v1*de1_theta + v2*de2_theta + v3*dnormal_theta;
% derivatives of 'v1', 'v2', and 'v3'
% with respect to 'xi'
% along the direction 'uu'
dv3_xiu = dv3_alpha*dalpha_xiu + dv3_phi*dphi_xiu;
dv2_xiu = dv2_alpha*dalpha_xiu + dv2_phi*dphi_xiu;
dv1_xiu = dv1_alpha*dalpha_xiu + dv1_phi*dphi_xiu;
% differential of 'v' with respect to 'xi'
% along the direction 'uu'
dv_xiu = dv1_xiu*e1 + dv2_xiu*e2 + dv3_xiu*normal +...
            +v1*de1_xiu + v2*de2_xiu + v3*dnormal_xiu;
% Hessians of 'v1', 'v2', and 'v3' with respect to 
% 'alpha' and 'phi'
d2v3_alphaalpha = sin(alpha)*(sin(phi*cos(alpha)) +...
    phi^2*sin(phi*cos(alpha))*sin(alpha)^2 +...
    3*phi*cos(alpha)*cos(phi*cos(alpha)));
d2v3_alphaphi = sin(alpha)^2*cos(phi*cos(alpha)) -...
    cos(alpha)^2*cos(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2;
d2v3_phiphi = sin(phi*cos(alpha))*cos(alpha)^2*sin(alpha);
d2v2_alphaalpha = phi*sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi^2*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*sin(phi)*cos(phi*cos(alpha)) +...
    2*phi*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2*sin(phi);
d2v2_alphaphi = -sin(alpha)*sin(phi)*(2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) - phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v2_phiphi = (cos(alpha)^2 - 1)*(cos(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi));
d2v1_alphaalpha = phi^2*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*cos(phi)*cos(phi*cos(alpha)) +...
    2*phi*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*cos(phi)*sin(alpha)^2;
d2v1_alphaphi = -cos(phi)*sin(alpha)*...
    (2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v1_phiphi = -(cos(alpha)^2 - 1)*...
    (sin(phi)*cos(phi*cos(alpha)) +...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi));
% second derivatives 'v1', 'v2', and 'v3'
% with respect to 'theta' and 'xi' 
% along the direction 'uu'
% dv3_xiu = dv3_alpha*dalpha_xiu + dv3_phi*dphi_xiu;
d2_v3_xiutheta = d2v3_alphaalpha*dalpha_theta*dalpha_xiu +...
    d2v3_alphaphi*dphi_theta*dalpha_xiu +...
    dv3_alpha*d2_alpha_xiutheta + ...% the second term
    d2v3_alphaphi*dalpha_theta*dphi_xiu +...
    d2v3_phiphi*dphi_theta*dphi_xiu + dv3_phi*d2_phi_xiutheta;
d2_v2_xiutheta = d2v2_alphaalpha*dalpha_theta*dalpha_xiu +...
    d2v2_alphaphi*dphi_theta*dalpha_xiu +...
    dv2_alpha*d2_alpha_xiutheta + ...% the second term
    d2v2_alphaphi*dalpha_theta*dphi_xiu +...
    d2v2_phiphi*dphi_theta*dphi_xiu + dv2_phi*d2_phi_xiutheta;
d2_v1_xiutheta = d2v1_alphaalpha*dalpha_theta*dalpha_xiu +...
    d2v1_alphaphi*dphi_theta*dalpha_xiu +...
    dv1_alpha*d2_alpha_xiutheta + ...% the second term
    d2v1_alphaphi*dalpha_theta*dphi_xiu +...
    d2v1_phiphi*dphi_theta*dphi_xiu + dv1_phi*d2_phi_xiutheta;
% the vector 'v'
% v = v1*e1 + v2*e2 + v3*normal;
% differential of 'v' with respect to 'xi'
% along the direction 'uu'
% dv_xiu = dv1_xiu*e1 + dv2_xiu*e2 + dv3_xiu*normal +...
%            +v1*de1_xiu + v2*de2_xiu + v3*dnormal_xiu;
% second derivative of 'v' with respect to 'xi'
% along the direction 'uu' and 'theta'
d2_v_xiutheta = dv1_xiu*de1_theta + d2_v1_xiutheta*e1 +...% the second term
    dv2_xiu*de2_theta + d2_v2_xiutheta*e2 +...% the third term
    dv3_xiu*dnormal_theta + d2_v3_xiutheta*normal +...% the fourth term
    dv1_theta*de1_xiu +v1*d2_e1_xiutheta +...% the fifth term
    dv2_theta*de2_xiu +v2*d2_e2_xiutheta +...% the final term
    dv3_theta*dnormal_xiu + v3*d2_normal_xiutheta;
% the second differential of parallel transport of 'qi'
% with respect to 'xi' 
% along the directon 'uu' and 'theta'  
d2parqi_xiutheta = zeros(3, T);
for j=1:T
   %{ 
  parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
  dparqi_xiu(:, j) = dot(de2_xiu, qi(:, j))*v +...
     dot(e2, qi(:, j))*dv_xiu +...
     dot(cross(de2_xiu, xi), qi(:, j))*cross(v, x) +...
     dot(cross(e2, uu), qi(:, j))*cross(v, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_xiu, x);
   %}
 d2parqi_xiutheta(:, j) = dot(d2_e2_xiutheta, qi(:, j))*v +...
     dot(de2_xiu, qi(:, j))*dv_theta +...% the second term
     dot(de2_theta, qi(:, j))*dv_xiu +...
     dot(e2, qi(:, j))*d2_v_xiutheta +...% the third term
     dot(cross(d2_e2_xiutheta, xi), qi(:, j))*cross(v, x) +...
     dot(cross(de2_xiu, xi), qi(:, j))*cross(dv_theta, x) +...% the fourth term
     dot(cross(de2_theta, uu), qi(:, j))*cross(v, x) +...
     dot(cross(e2, uu), qi(:, j))*cross(dv_theta, x) +...% the final term
     dot(cross(de2_theta, xi), qi(:, j))*cross(dv_xiu, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(d2_v_xiutheta, x);
end
end

function d2parqi_xutheta = d2_parallel_transport_PL_xutheta2(qi, xi, x, theta, uu)
% second differential of parallel transport of curve 'qi' 
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 'beta'
% defined by the angle 'theta'
% with respect to 'theta' and 'x' 
% along the direction 'uu' (the resulting matrix (3xT))
T = size(qi, 2);
% 'alpha' and 'phi'
alpha = acos(sin(theta)*sqrt((1+dot(xi, x))/2));
phi = 2*asin(sqrt((1-dot(xi,x))/(1+cos(theta)^2-...
             dot(xi, x)*sin(theta)^2)));
% derivative of 'alpha' and 'phi' with respect to 'theta'
Xix = dot(xi, x);
dalpha_theta = -(cos(theta)*(Xix/2 + 1/2)^(1/2))/...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2); 
dphi_theta = -(sin(2*theta)*(1 - Xix)^(1/2)*...
    (Xix + 1)^(1/2))/...
    ((1 - sin(theta)^2)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
% gradient of 'alpha' and 'phi' with respect to 'x'
% along the direction 'uu' 
dalpha_xu = -sin(theta)*dot(xi, uu)/...
    (4*(Xix/2 + 1/2)^(1/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2)); 
dphi_xu = -(2*sin(theta)^2 - 2)*dot(xi, uu)/...
    ((1 - sin(theta)^2)^(1/2)*...
    (1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
% second derivative of 'alpha' and 'phi' 
% with respect to 'x' along the direction 'uu' and 'theta'
d2_alpha_xutheta = ((cos(theta)*(sin(theta)^2*(Xix/2 + 1/2) - 1) -...
    cos(theta)*sin(theta)^2*(Xix/2 + 1/2))/...
    (4*(Xix/2 + 1/2)^(1/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(3/2)))*dot(xi, uu); 
d2_phi_xutheta = ((cos(theta)*sin(theta)*(2*Xix + 2)*...
    (sin(theta)^2 -...
    2*Xix + Xix*sin(theta)^2))/...
    ((1 - sin(theta)^2)^(1/2)*...
    (1 - Xix)^(1/2)*(Xix + 1)^(3/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2)^2))*dot(xi, uu);
% normal
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
% direction of the p-optimal curve 'beta' at the beginning 
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0);
% derivative of 'normal' with respect to 'theta'
dnormal_theta = (xi + x)*cos(theta)/norm(xi + x) -...
     cross(xi, x)*sin(theta)/norm(cross(xi, x));
% differential of 'normal' with respect to 'x'
% along the direction 'uu'
dnormal_xu = uu*(sin(theta)/norm(xi + x)) -...
   (xi + x)*(sin(theta)/norm(xi + x)^3)*dot(xi + x, uu) +...% second term
   cross(xi, uu)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*(cos(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(xi, uu));
% second derivative of normal with respect to 'x' and 'theta
d2_normal_xutheta = uu*(cos(theta)/norm(xi + x)) -...
   (xi + x)*(cos(theta)/norm(xi + x)^3)*dot(xi + x, uu) -...
   cross(xi, uu)*(sin(theta)/norm(cross(xi, x))) +...
   cross(xi, x)*(sin(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(xi, uu));
% ee2
ee2 = cross(normal, xi)/norm(cross(normal, xi));
% derivative of 'ee2' with respect to 'theta'
dee2_theta = cross(dnormal_theta, xi)/norm(cross(normal, xi)) -...
     cross(normal, xi)*...
     dot(cross(dnormal_theta, xi), cross(normal, xi))/...
     norm(cross(normal, xi))^3;
% differential of 'ee2' with respect to 'x'
% along the direction 'uu'
dee2_xu = cross(dnormal_xu, xi)/norm(cross(normal, xi)) -...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xu, xi))/...
    norm(cross(normal, xi))^3;
% second derivative of 'ee2' with respect to 'x' and 'theta'
d2_ee2_xutheta = cross(d2_normal_xutheta, xi)/...
    norm(cross(normal, xi)) -...
    cross(dnormal_xu, xi)*...
    dot(cross(normal, xi), cross(dnormal_theta, xi))/...
    (norm(cross(normal, xi))^3) -...% the second term
    (cross(dnormal_theta, xi)*...
    dot(cross(normal, xi), cross(dnormal_xu, xi))/...
    (norm(cross(normal, xi))^3) +...
    cross(normal, xi)*...
    dot(cross(dnormal_theta, xi), cross(dnormal_xu, xi))/...
    (norm(cross(normal, xi))^3) +...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(d2_normal_xutheta, xi))/...
    (norm(cross(normal, xi))^3) -...
    cross(normal, xi)*...
    dot(cross(normal, xi), cross(dnormal_xu, xi))*...
    3*dot(cross(normal, xi), cross(dnormal_theta, xi))/...
    (norm(cross(normal, xi))^5));
% derivative and differential of 'e2' and 'e1' 
% with respect to 'theta' and 'x' 
% along the direction 'uu'
% and second derivative of 'e2' and 'e1' 
% with respect to 'x' 
% along the direction 'uu' and 
% 'theta' correspondingly
if (dot(cross(normal, xi), dbeta0) > 0)
   e2 = ee2;
   de2_theta = dee2_theta;
   de2_xu = dee2_xu;
   d2_e2_xutheta = d2_ee2_xutheta;
else
   e2 = -ee2;
   de2_theta = -dee2_theta;
   de2_xu = -dee2_xu;
   d2_e2_xutheta = -d2_ee2_xutheta;
end
if (dot(cross(cross(normal, xi), normal), xi) > 0)
    e1 = cross(ee2, normal);
    de1_theta = cross(dee2_theta, normal) +...
        cross(ee2, dnormal_theta);
    de1_xu = cross(dee2_xu, normal) + cross(ee2, dnormal_xu);
    d2_e1_xutheta = cross(d2_ee2_xutheta, normal) +...
        cross(dee2_xu, dnormal_theta) +...% the second term
        cross(dee2_theta, dnormal_xu) +...
        cross(ee2, d2_normal_xutheta);
else
    e1 = -cross(ee2, normal);
    de1_theta = -cross(dee2_theta, normal) -...
        cross(ee2, dnormal_theta);
    de1_xu = -cross(dee2_xu, normal) - cross(ee2, dnormal_xu);
    d2_e1_xutheta = -cross(d2_ee2_xutheta, normal) -...
        cross(dee2_xu, dnormal_theta) -...% the second term
        cross(dee2_theta, dnormal_xu) -...
        cross(ee2, d2_normal_xutheta);
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% differentials of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% derivatives of 'v1', 'v2', and 'v3'
% with respect to 'theta' 
dv3_theta = dv3_alpha*dalpha_theta + dv3_phi*dphi_theta;
dv2_theta = dv2_alpha*dalpha_theta + dv2_phi*dphi_theta;
dv1_theta = dv1_alpha*dalpha_theta + dv1_phi*dphi_theta;
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% therefore 'v' and first derivative of 'v'
% with respect to 'theta'
dv_theta = dv1_theta*e1 + dv2_theta*e2 + dv3_theta*normal +...
            +v1*de1_theta + v2*de2_theta + v3*dnormal_theta;
% derivatives of 'v1', 'v2', and 'v3'
% with respect to 'x'
% along the direction 'uu'
dv3_xu = dv3_alpha*dalpha_xu + dv3_phi*dphi_xu;
dv2_xu = dv2_alpha*dalpha_xu + dv2_phi*dphi_xu;
dv1_xu = dv1_alpha*dalpha_xu + dv1_phi*dphi_xu;
% differential of 'v' with respect to 'x'
% along the direction 'uu'
dv_xu = dv1_xu*e1 + dv2_xu*e2 + dv3_xu*normal +...
            +v1*de1_xu + v2*de2_xu + v3*dnormal_xu;
% Hessians of 'v1', 'v2', and 'v3' with respect to 
% 'alpha' and 'phi'
d2v3_alphaalpha = sin(alpha)*(sin(phi*cos(alpha)) +...
    phi^2*sin(phi*cos(alpha))*sin(alpha)^2 +...
    3*phi*cos(alpha)*cos(phi*cos(alpha)));
d2v3_alphaphi = sin(alpha)^2*cos(phi*cos(alpha)) -...
    cos(alpha)^2*cos(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2;
d2v3_phiphi = sin(phi*cos(alpha))*cos(alpha)^2*sin(alpha);
d2v2_alphaalpha = phi*sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi^2*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*sin(phi)*cos(phi*cos(alpha)) +...
    2*phi*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2*sin(phi);
d2v2_alphaphi = -sin(alpha)*sin(phi)*...
    (2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v2_phiphi = (cos(alpha)^2 - 1)*...
    (cos(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi));
d2v1_alphaalpha = phi^2*sin(alpha)^2*...
    sin(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*cos(phi)*cos(phi*cos(alpha)) +...
    2*phi*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*cos(phi)*sin(alpha)^2;
d2v1_alphaphi = -cos(phi)*sin(alpha)*...
    (2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v1_phiphi = -(cos(alpha)^2 - 1)*...
    (sin(phi)*cos(phi*cos(alpha)) +...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi));
% second derivatives 'v1', 'v2', and 'v3'
% with respect to 'theta' and 'x' 
% along the direction 'uu'
% dv3_xu = dv3_alpha*dalpha_xu + dv3_phi*dphi_xu;
d2_v3_xutheta = d2v3_alphaalpha*dalpha_theta*dalpha_xu +...
    d2v3_alphaphi*dphi_theta*dalpha_xu +...
    dv3_alpha*d2_alpha_xutheta + ...% the second term
    d2v3_alphaphi*dalpha_theta*dphi_xu +...
    d2v3_phiphi*dphi_theta*dphi_xu + dv3_phi*d2_phi_xutheta;
d2_v2_xutheta = d2v2_alphaalpha*dalpha_theta*dalpha_xu +...
    d2v2_alphaphi*dphi_theta*dalpha_xu +...
    dv2_alpha*d2_alpha_xutheta + ...% the second term
    d2v2_alphaphi*dalpha_theta*dphi_xu +...
    d2v2_phiphi*dphi_theta*dphi_xu + dv2_phi*d2_phi_xutheta;
d2_v1_xutheta = d2v1_alphaalpha*dalpha_theta*dalpha_xu +...
    d2v1_alphaphi*dphi_theta*dalpha_xu +...
    dv1_alpha*d2_alpha_xutheta + ...% the second term
    d2v1_alphaphi*dalpha_theta*dphi_xu +...
    d2v1_phiphi*dphi_theta*dphi_xu + dv1_phi*d2_phi_xutheta;
% the vector 'v'
% v = v1*e1 + v2*e2 + v3*normal;
% differential of 'v' with respect to 'x'
% along the direction 'uu'
% dv_xu = dv1_xu*e1 + dv2_xu*e2 + dv3_xu*normal +...
%            +v1*de1_xu + v2*de2_xu + v3*dnormal_xu;
% second derivative of 'v' with respect to 'x'
% along the direction 'uu' and 'theta'
d2_v_xutheta = dv1_xu*de1_theta + d2_v1_xutheta*e1 +...% the second term
    dv2_xu*de2_theta + d2_v2_xutheta*e2 +...% the third term
    dv3_xu*dnormal_theta + d2_v3_xutheta*normal +...% the fourth term
    dv1_theta*de1_xu +v1*d2_e1_xutheta +...% the fifth term
    dv2_theta*de2_xu +v2*d2_e2_xutheta +...% the final term
    dv3_theta*dnormal_xu + v3*d2_normal_xutheta;
% the second differential of parallel transport of 'qi'
% with respect to 'xi' 
% along the directon 'uu' and 'theta'  
d2parqi_xutheta = zeros(3, T);
for j=1:T
   %{ 
 parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
 dparqi_xu(:, j) = dot(de2_xu, qi(:, j))*v +...
    dot(e2, qi(:, j))*dv_xu +...
    dot(cross(de2_xu, xi), qi(:, j))*cross(v, x) +...
    dot(cross(e2, xi), qi(:, j))*cross(dv_xu, x) +...
    dot(cross(e2, xi), qi(:, j))*cross(v, uu);
   %}
 d2parqi_xutheta(:, j) = dot(d2_e2_xutheta, qi(:, j))*v +...
     dot(de2_xu, qi(:, j))*dv_theta +...% the second term
     dot(de2_theta, qi(:, j))*dv_xu +...
     dot(e2, qi(:, j))*d2_v_xutheta +...% the third term
     dot(cross(d2_e2_xutheta, xi), qi(:, j))*cross(v, x) +...
     dot(cross(de2_xu, xi), qi(:, j))*cross(dv_theta, x) +...% the fourth term
     dot(cross(de2_theta, xi), qi(:, j))*cross(dv_xu, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(d2_v_xutheta, x) +...% the final term
     dot(cross(de2_theta, xi), qi(:, j))*cross(v, uu) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_theta, uu);
end
end

function d2_parqi_xiu1u2 = d2_parallel_transport_PL_x1(qi, xi, x, theta, uu1, uu2)
% second differential of parallel transport 
% of curve 'qi'  
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 'beta' 
% defined by the angle 'theta'
% with respect to 'xi'
% along directions 'uu1' and 'uu2'
T = size(qi, 2);
% 'alpha', 'phi', 'normal', and 'ee2'
alpha = acos(sin(theta)*sqrt((1 + dot(xi, x))/2));
phi = 2*asin(sqrt((1 - dot(xi,x))/(1 + cos(theta)^2 -...
             dot(xi, x)*sin(theta)^2)));
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0); 
ee2 = cross(normal, xi)/norm(cross(normal, xi));
Xix = dot(xi, x);
% 'e2' and 'e1'
if (dot(cross(normal, xi), dbeta0)>=0)
   e2 = ee2;
else
   e2 = -ee2;
end
if (dot(cross(cross(normal, xi), normal), xi)>=0)
    e1 = cross(ee2, normal);
else
    e1 = -cross(ee2, normal);
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% differentials of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% Hessians of 'v1', 'v2', and 'v3' with respect to 
% 'alpha' and 'phi'
d2v3_alphaalpha = sin(alpha)*(sin(phi*cos(alpha)) +...
    phi^2*sin(phi*cos(alpha))*sin(alpha)^2 +...
    3*phi*cos(alpha)*cos(phi*cos(alpha)));
d2v3_alphaphi = sin(alpha)^2*cos(phi*cos(alpha)) -...
    cos(alpha)^2*cos(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2;
d2v3_phiphi = sin(phi*cos(alpha))*cos(alpha)^2*sin(alpha);
d2v2_alphaalpha = phi*sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi^2*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*sin(phi)*cos(phi*cos(alpha)) +...
    2*phi*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2*sin(phi);
d2v2_alphaphi = -sin(alpha)*sin(phi)*(2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v2_phiphi = (cos(alpha)^2 - 1)*(cos(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi));
d2v1_alphaalpha = phi^2*sin(alpha)^2*...
    sin(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*cos(phi)*cos(phi*cos(alpha)) +...
    2*phi*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*cos(phi)*sin(alpha)^2;
d2v1_alphaphi = -cos(phi)*sin(alpha)*...
    (2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v1_phiphi = -(cos(alpha)^2 - 1)*...
    (sin(phi)*cos(phi*cos(alpha)) +...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi));
% finally 
d2_parqi_xiu1u2 = zeros(3, T);
for j=1:T
   %{ 
 parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
 dparqi_xiu(:, j) = dot(de2_xiu(u1), qi(:, j))*v +...
     dot(e2, qi(:, j))*dv_xiu(u1) +...
     dot(cross(de2_xiu(u1), xi), qi(:, j))*cross(v, x) +...
     dot(cross(e2, u1), qi(:, j))*cross(v, x) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_xiu(u1), x);
   %}
 d2_parqi_xiu1u2(:, j) = dot(d2_e2_xiu(uu1, uu2), qi(:, j))*v +...
     dot(de2_xiu(uu1), qi(:, j))*dv_xiu(uu2) +...% the second term
     dot(de2_xiu(uu2), qi(:, j))*dv_xiu(uu1) +...
     dot(e2, qi(:, j))*d2_v_xiu(uu1, uu2) +...% the third term
     dot(cross(d2_e2_xiu(uu1, uu2), xi), qi(:, j))*cross(v, x) +...
     dot(cross(de2_xiu(uu1), uu2), qi(:, j))*cross(v, x) +...
     dot(cross(de2_xiu(uu1), xi), qi(:, j))*cross(dv_xiu(uu2), x) +...% the fourth term
     dot(cross(de2_xiu(uu2), uu1), qi(:, j))*cross(v, x) +...
     dot(cross(e2, uu1), qi(:, j))*cross(dv_xiu(uu2), x) +...% the final term
     dot(cross(de2_xiu(uu2), xi), qi(:, j))*cross(dv_xiu(uu1), x) +...
     dot(cross(e2, uu2), qi(:, j))*cross(dv_xiu(uu1), x) +...
     dot(cross(e2, xi), qi(:, j))*cross(d2_v_xiu(uu1, uu2), x);
end
% Hessian of 'v' with respect to 'xi' 
% along directions 'u1' and 'u2'
function mat = d2_v_xiu(u1, u2)
%{
v = v1*e1 + v2*e2 + v3*normal;
dv_xiu = e1*dv1_xiu(u1) + e2*dv2_xiu(u1) + normal*dv3_xiu(u1) +...
       v1*de1_xiu(u1) + v2*de2_xiu(u1) + v3*dnormal_xiu(u1);
%}
mat = de1_xiu(u2)*dv1_xiu(u1) + e1*d2_v1_xiu(u1, u2) +...
    de2_xiu(u2)*dv2_xiu(u1) + e2*d2_v2_xiu(u1, u2) +...
    dnormal_xiu(u2)*dv3_xiu(u1) + normal*d2_v3_xiu(u1, u2) +...
    dv1_xiu(u2)*de1_xiu(u1) + v1*d2_e1_xiu(u1, u2) +...
    dv2_xiu(u2)*de2_xiu(u1) + v2*d2_e2_xiu(u1, u2) +...
    dv3_xiu(u2)*dnormal_xiu(u1) + v3*d2_normal_xiu(u1, u2);
end
% Hessians of 'e1' and 'e2' with respect to 'xi' 
% along directions 'u1' and 'u2'
function mat = d2_e1_xiu(u1, u2)
%{
 e1 = cross(ee2, normal);
 de1_xiu = cross(dee2_xiu(u1), normal) +...
        cross(ee2, dnormal_xiu(u1));
%}
 if (dot(cross(cross(normal, xi), normal), xi) > 0)
   mat = cross(d2_ee2_xiu(u1, u2), normal) +...
       cross(dee2_xiu(u1), dnormal_xiu(u2)) +...% the second term
       cross(dee2_xiu(u2), dnormal_xiu(u1)) +...
       cross(ee2, d2_normal_xiu(u1, u2));
 else
   mat = -cross(d2_ee2_xiu(u1, u2), normal) -...
       cross(dee2_xiu(u1), dnormal_xiu(u2)) -...% the second term
       cross(dee2_xiu(u2), dnormal_xiu(u1)) -...
       cross(ee2, d2_normal_xiu(u1, u2));
 end
end
function mat = d2_e2_xiu(u1, u2)
     if (dot(cross(normal, xi), dbeta0) > 0)
        mat = d2_ee2_xiu(u1, u2);
     else
        mat = -d2_ee2_xiu(u1, u2); 
     end
end
% Hessian of 'ee2' with respect to 'xi' 
% along directions 'u1' and 'u2'
function mat = d2_ee2_xiu(u1, u2)
%{
   dee2_xiu = (cross(dnormal_xiu(u1), xi) + cross(normal, u1))/...
     norm(cross(normal, xi)) -...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(dnormal_xiu(u1), xi) +...
     cross(normal, u1))/norm(cross(normal, xi))^3;
%}
mat = (cross(d2_normal_xiu(u1, u2), xi) +...
     cross(dnormal_xiu(u1), u2) + cross(dnormal_xiu(u2), u1))/...
     norm(cross(normal, xi))  -...% the second term
     ((cross(dnormal_xiu(u2), xi) + cross(normal, u2))*...
     dot(cross(normal, xi), cross(dnormal_xiu(u1), xi) +...
     cross(normal, u1))/norm(cross(normal, xi))^3 +...
     cross(normal, xi)*...
     dot(cross(dnormal_xiu(u2), xi) +...
     cross(normal, u2), cross(dnormal_xiu(u1), xi) +...
     cross(normal, u1))/norm(cross(normal, xi))^3 +...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(d2_normal_xiu(u1, u2), xi) +...
     cross(dnormal_xiu(u1), u2) + cross(dnormal_xiu(u2), u1))/...
     norm(cross(normal, xi))^3 -...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(dnormal_xiu(u1), xi) +...
     cross(normal, u1))*3*...
     dot(cross(normal, xi), cross(dnormal_xiu(u2), xi) +...
     cross(normal, u2))/norm(cross(normal, xi))^5);
end
% Hessian of 'normal' with respect to 'xi' 
% along directions 'u1' and 'u2'
function mat = d2_normal_xiu(u1, u2)
%{
 dnormal_xiu = u1*(sin(theta)/norm(xi + x)) -...
   (xi + x)*dot(xi + x, u1)*(sin(theta)/norm(xi+x)^3) +...
   cross(u1, x)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*dot(cross(xi, x), cross(u1, x))*...
   (cos(theta)/norm(cross(xi, x))^3);  
%}
mat = -u1*dot(xi + x, u2)*(sin(theta)/norm(xi + x)) -...% the second term
    (u2*dot(xi + x, u1)*(sin(theta)/norm(xi + x)^3) +...
    (xi + x)*dot(u2, u1)*(sin(theta)/norm(xi + x)^3) -...
    (xi + x)*dot(xi + x, u1)*3*dot(xi + x, u2)*...
    (sin(theta)/norm(xi + x)^5)) -...% the third term
    cross(u1, x)*dot(cross(xi, x), cross(u2, x))*...
    (cos(theta)/norm(cross(xi, x))^3) -...% the final term
    (cross(u2, x)*dot(cross(xi, x), cross(u1, x))*...
    (cos(theta)/norm(cross(xi, x))^3) +...
    cross(xi, x)*dot(cross(u2, x), cross(u1, x))*...
    (cos(theta)/norm(cross(xi, x))^3) -...
    cross(xi, x)*dot(cross(xi, x), cross(u1, x))*...
    3*dot(cross(xi, x), cross(u2, x))*(cos(theta)/norm(cross(xi, x))^5));
end
% hessians of 'v1', 'v2', and 'v1'
% with respect to 'x' 
% along directions 'u1' and 'u2' correspondingly
function matu = d2_v3_xiu(u1, u2)
% dv3_xiu = dv3_alpha*dalpha_xiu(u1) + dv3_phi*dphi_xiu(u1);
 matu = dv3_alpha*d2_alpha_xiu(u1, u2) +...
    d2v3_alphaalpha*dalpha_xiu(u2)*dalpha_xiu(u1) +...
    d2v3_alphaphi*(dphi_xiu(u2)*dalpha_xiu(u1) +...
    dalpha_xiu(u2)*dphi_xiu(u1)) +...
    d2v3_phiphi*dphi_xiu(u2)*dphi_xiu(u1) +...
    dv3_phi*d2_phi_xiu(u1, u2);
end
function matu = d2_v2_xiu(u1, u2)
% dv2_xiu = dv2_alpha*dalpha_xiu(u1) + dv2_phi*dphi_xiu(u1);
 matu = dv2_alpha*d2_alpha_xiu(u1, u2) +...
    d2v2_alphaalpha*dalpha_xiu(u2)*dalpha_xiu(u1) +...
    d2v2_alphaphi*(dphi_xiu(u2)*dalpha_xiu(u1) +...
    dalpha_xiu(u2)*dphi_xiu(u1)) +...
    d2v2_phiphi*dphi_xiu(u2)*dphi_xiu(u1) +...
    dv2_phi*d2_phi_xiu(u1, u2);
end
function matu = d2_v1_xiu(u1, u2)
% dv1_xiu = dv1_alpha*dalpha_xiu(u1) + dv1_phi*dphi_xiu(u1);
 matu = dv1_alpha*d2_alpha_xiu(u1, u2) +...
    d2v1_alphaalpha*dalpha_xiu(u2)*dalpha_xiu(u1) +...
    d2v1_alphaphi*(dphi_xiu(u2)*dalpha_xiu(u1) +...
    dalpha_xiu(u2)*dphi_xiu(u1)) +...
    d2v1_phiphi*dphi_xiu(u2)*dphi_xiu(u1) +...
    dv1_phi*d2_phi_xiu(u1, u2);
end
% Hessian of alpha and phi with respect 'x' 
% along directions 'u1' and 'u2' respectfully
function matu = d2_alpha_xiu(u1, u2)
%{
  dalpha_xiu = -sin(theta)*dot(u1, x)/...
    (4*(Xix/2 + 1/2)^(1/2)*(1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2))
%}    
 matu = (-(sin(theta)*(sin(theta)^2*(Xix/2 + 1/2) - 1) +...
    sin(theta)^3*(Xix/2 + 1/2))/(16*(Xix/2 + 1/2)^(3/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(3/2)))*dot(u2, x)*dot(u1, x);
end
function matu = d2_phi_xiu(u1, u2)
%{    
  dphi_xiu = -(2*sin(theta)^2 - 2)*dot(u1, x)/...
    ((1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));  
 %}
 matu = (((2*sin(theta)^2 - 2)*(cos(2*theta) + 1)*...
    (3*Xix - cos(2*theta) + 2*Xix^2*cos(2*theta) -...
    2*Xix^2 + Xix*cos(2*theta) + 1))/...
    (4*(1 - sin(theta)^2)^(3/2)*(1 - Xix)^(3/2)*(Xix + 1)^(3/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2)^2))*dot(u2, x)*dot(u1, x);
end
% differential of 'v' with respect to 'xi'
% along the direction 'u1'
function matu = dv_xiu(u1)
% v = v1*e1 + v2*e2 + v3*normal;
 matu = e1*dv1_xiu(u1) + e2*dv2_xiu(u1) + normal*dv3_xiu(u1) +...
      + v1*de1_xiu(u1) + v2*de2_xiu(u1) + v3*dnormal_xiu(u1);
end
% differentials of 'v1', 'v2', and 'v3' with respect to 'xi' 
% along the direction 'u1'
function matu = dv3_xiu(u1)
 matu = dv3_alpha*dalpha_xiu(u1) + dv3_phi*dphi_xiu(u1);
end
function matu = dv2_xiu(u1)
 matu = dv2_alpha*dalpha_xiu(u1) + dv2_phi*dphi_xiu(u1);
end
function matu = dv1_xiu(u1)
 matu = dv1_alpha*dalpha_xiu(u1) + dv1_phi*dphi_xiu(u1);
end
% differentials of 'alpha', and 'phi' with respect to 'xi'
% along the direction 'u1'
function matu = dalpha_xiu(u1)
 matu = -sin(theta)*dot(u1, x)/...
    (4*(Xix/2 + 1/2)^(1/2)*(1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2)); 
end
function matu = dphi_xiu(u1)
 matu = -(2*sin(theta)^2 - 2)*dot(u1, x)/...
    ((1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
end
% derivative and differential of 'e2' and 'e1' 
% with respect to 'theta' and 'xi' 
% along the direction 'u1'
%
function matu = de1_xiu(u1)
 if (dot(cross(cross(normal, xi), normal), xi) > 0)
  matu = cross(dee2_xiu(u1), normal) + cross(ee2, dnormal_xiu(u1));
 else
  matu = -cross(dee2_xiu(u1), normal) - cross(ee2, dnormal_xiu(u1));
 end
end
%}
%
function matu = de2_xiu(u1)
 if (dot(cross(normal, xi), dbeta0) > 0)
   matu = dee2_xiu(u1);
 else
   matu = -dee2_xiu(u1);
 end
end
%}
% differential of 'ee2' with respect to 'xi'
% along the direction 'u1'
%
function matu = dee2_xiu(u1)
 % ee2 = cross(normal, xi)/norm(cross(normal, xi));
 matu = -cross(normal, xi)*...
     dot(cross(normal, xi), cross(dnormal_xiu(u1), xi) +...
     cross(normal, u1))/norm(cross(normal, xi))^3 +...
     (cross(dnormal_xiu(u1), xi) + cross(normal, u1))/...
     norm(cross(normal, xi));   
end
%}
% differential of 'normal' with respect to 'xi'
% along the direction 'u1'
%
function matu = dnormal_xiu(u1)
 %{
 normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
   %}
 matu = u1*(sin(theta)/norm(xi + x)) -...
   (xi + x)*(sin(theta)/norm(xi+x)^3)*dot(xi + x, u1) +...% the second term
   cross(u1, x)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*(cos(theta)/norm(cross(xi, x))^3)*...
   dot(cross(xi, x), cross(u1, x));   
end
%}
end

function d2_parqi_xu1u2 = d2_parallel_transport_PL_x2(qi, xi, x, theta, uu1, uu2)
% second differential of parallel transport 
% of curve 'qi'  
% from the tangent space at 'xi'
% to the tangent space at 'x'
% along the p-optimal curve 'beta' 
% defined by the angle 'theta'
% with respect to 'x'
% along directions 'uu1' and 'uu2'
T = size(qi, 2);
% 'alpha', 'phi', 'normal', and 'ee2'
alpha = acos(sin(theta)*sqrt((1 + dot(xi, x))/2));
phi = 2*asin(sqrt((1 - dot(xi,x))/(1 + cos(theta)^2 -...
             dot(xi, x)*sin(theta)^2)));
normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
dbeta0 = -xi*phi*sin(0) + cross(normal, xi)*phi*cos(0) +...
       normal*dot(normal, xi)*phi*sin(0); 
ee2 = cross(normal, xi)/norm(cross(normal, xi));
Xix = dot(xi, x);
% 'e2' and 'e1'
if (dot(cross(normal, xi), dbeta0)>=0)
   e2 = ee2;
else
   e2 = -ee2;
end
if (dot(cross(cross(normal, xi), normal), xi)>=0)
    e1 = cross(ee2, normal);
else
    e1 = -cross(ee2, normal);
end
% coefficient of vector 'v' (parallel transport of 'e2')
% with basis 'e1', 'e2', and 'normal'
% 'v1', 'v2', and 'v3'
v3 = -sin(alpha)*sin(phi*cos(alpha));
v2 = cos(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*sin(phi)*sin(phi*cos(alpha));
v1 = -sin(phi)*cos(phi*cos(alpha))+...
    cos(alpha)*cos(phi)*sin(phi*cos(alpha));
% differentials of 'v1', 'v2', and 'v3' with respect to
% 'alpha' and 'phi'
dv3_alpha = phi*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha);
dv3_phi = -cos(alpha)*sin(alpha)*cos(phi*cos(alpha));
dv2_alpha = -sin(alpha)*(sin(phi*cos(alpha))*sin(phi) -...
    phi*sin(phi*cos(alpha))*cos(phi) +...
    phi*cos(alpha)*sin(phi)*cos(phi*cos(alpha)));
dv2_phi = sin(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
dv1_alpha = -sin(alpha)*(sin(phi*cos(alpha))*cos(phi) +...
    phi*sin(phi*cos(alpha))*sin(phi) +...
    phi*cos(alpha)*cos(phi)*cos(phi*cos(alpha)));
dv1_phi = cos(phi)*cos(phi*cos(alpha))*(cos(alpha)^2 - 1);
% the vector 'v'
v = v1*e1 + v2*e2 + v3*normal;
% Hessians of 'v1', 'v2', and 'v3' with respect to 
% 'alpha' and 'phi'
d2v3_alphaalpha = sin(alpha)*(sin(phi*cos(alpha)) +...
    phi^2*sin(phi*cos(alpha))*sin(alpha)^2 +...
    3*phi*cos(alpha)*cos(phi*cos(alpha)));
d2v3_alphaphi = sin(alpha)^2*cos(phi*cos(alpha)) -...
    cos(alpha)^2*cos(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2;
d2v3_phiphi = sin(phi*cos(alpha))*cos(alpha)^2*sin(alpha);
d2v2_alphaalpha = phi*sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi^2*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*sin(phi)*cos(phi*cos(alpha)) +...
    2*phi*sin(alpha)^2*sin(phi)*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*sin(alpha)^2*sin(phi);
d2v2_alphaphi = -sin(alpha)*sin(phi)*(2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v2_phiphi = (cos(alpha)^2 - 1)*(cos(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*sin(phi));
d2v1_alphaalpha = phi^2*sin(alpha)^2*...
    sin(phi)*cos(phi*cos(alpha)) -...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi) -...
    phi*sin(phi*cos(alpha))*cos(alpha)*sin(phi) -...
    phi*cos(alpha)^2*cos(phi)*cos(phi*cos(alpha)) +...
    2*phi*cos(phi)*sin(alpha)^2*cos(phi*cos(alpha)) -...
    phi^2*sin(phi*cos(alpha))*cos(alpha)*cos(phi)*sin(alpha)^2;
d2v1_alphaphi = -cos(phi)*sin(alpha)*...
    (2*cos(alpha)*cos(phi*cos(alpha)) +...
    phi*sin(phi*cos(alpha)) -...
    phi*sin(phi*cos(alpha))*cos(alpha)^2);
d2v1_phiphi = -(cos(alpha)^2 - 1)*...
    (sin(phi)*cos(phi*cos(alpha)) +...
    sin(phi*cos(alpha))*cos(alpha)*cos(phi));
% finally 
d2_parqi_xu1u2 = zeros(3, T);
for j=1:T
   %{ 
 parqi(:, j) = dot(e2, qi(:, j))*v +...
     dot(cross(e2, xi), qi(:, j))*cross(v, x);
 dparqi_xu(:, j) = dot(de2_xu(uu1), qi(:, j))*v +...
    dot(e2, qi(:, j))*dv_xu(uu1) +...
    dot(cross(de2_xu(uu1), xi), qi(:, j))*cross(v, x) +...
    dot(cross(e2, xi), qi(:, j))*cross(dv_xu(uu1), x) +...
    dot(cross(e2, xi), qi(:, j))*cross(v, uu1);
   %}
 d2_parqi_xu1u2(:, j) = dot(d2_e2_xu(uu1, uu2), qi(:, j))*v +...
     dot(de2_xu(uu1), qi(:, j))*dv_xu(uu2) +...% the second term
     dot(de2_xu(uu2), qi(:, j))*dv_xu(uu1) +...
     dot(e2, qi(:, j))*d2_v_xu(uu1, uu2) +...% the third term
     dot(cross(d2_e2_xu(uu1, uu2), xi), qi(:, j))*cross(v, x) +...
     dot(cross(de2_xu(uu1), xi), qi(:, j))*cross(dv_xu(uu2), x) +...
     dot(cross(de2_xu(uu1), xi), qi(:, j))*cross(v, uu2) +...% the fourth term
     dot(cross(de2_xu(uu2), xi), qi(:, j))*cross(dv_xu(uu1), x) +...
     dot(cross(e2, xi), qi(:, j))*cross(d2_v_xu(uu1, uu2), x) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_xu(uu1), uu2) +...% the final term
     dot(cross(de2_xu(uu2), xi), qi(:, j))*cross(v, uu1) +...
     dot(cross(e2, xi), qi(:, j))*cross(dv_xu(uu2), uu1);
end
% Hessian of 'v' with respect to 'x' 
% along directions 'u1' and 'u2'
function mat = d2_v_xu(u1, u2)
%{
v = v1*e1 + v2*e2 + v3*normal;
dv_xiu = e1*dv1_xu(u1) + e2*dv2_xu(u1) + normal*dv3_xu(u1) +...
       v1*de1_xu(u1) + v2*de2_xu(u1) + v3*dnormal_xu(u1);
%}
mat = de1_xu(u2)*dv1_xu(u1) + e1*d2_v1_xu(u1, u2) +...
    de2_xu(u2)*dv2_xu(u1) + e2*d2_v2_xu(u1, u2) +...
    dnormal_xu(u2)*dv3_xu(u1) + normal*d2_v3_xu(u1, u2) +...
    dv1_xu(u2)*de1_xu(u1) + v1*d2_e1_xu(u1, u2) +...
    dv2_xu(u2)*de2_xu(u1) + v2*d2_e2_xu(u1, u2) +...
    dv3_xu(u2)*dnormal_xu(u1) + v3*d2_normal_xu(u1, u2);
end
% Hessians of 'e1' and 'e2' with respect to 'x' 
% along directions 'u1' and 'u2'
function mat = d2_e1_xu(u1, u2)
%{
 e1 = cross(ee2, normal);
 de1_xiu = cross(dee2_xiu(u1), normal) +...
        cross(ee2, dnormal_xiu(u1));
%}
 if (dot(cross(cross(normal, xi), normal), xi) > 0)
   mat = cross(d2_ee2_xu(u1, u2), normal) +...
       cross(dee2_xu(u1), dnormal_xu(u2)) +...% the second term
       cross(dee2_xu(u2), dnormal_xu(u1)) +...
       cross(ee2, d2_normal_xu(u1, u2));
 else
   mat = -cross(d2_ee2_xu(u1, u2), normal) -...
       cross(dee2_xu(u1), dnormal_xu(u2)) -...% the second term
       cross(dee2_xu(u2), dnormal_xu(u1)) -...
       cross(ee2, d2_normal_xu(u1, u2));
 end
end
function mat = d2_e2_xu(u1, u2)
     if (dot(cross(normal, xi), dbeta0) > 0)
        mat = d2_ee2_xu(u1, u2);
     else
        mat = -d2_ee2_xu(u1, u2); 
     end
end
% Hessian of 'ee2' with respect to 'x' 
% along directions 'u1' and 'u2'
function mat = d2_ee2_xu(u1, u2)
%{
    ee2 = cross(normal, xi)/norm(cross(normal, xi));
    dee2_xu  = cross(dnormal_xu(u1), xi)/norm(cross(normal, xi)) -...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(dnormal_xu(u1), xi))/...
     norm(cross(normal, xi))^3; 
%}
mat = cross(d2_normal_xu(u1, u2), xi)/norm(cross(normal, xi)) -...
    cross(dnormal_xu(u1), xi)*...
    dot(cross(normal, xi), cross(dnormal_xu(u2), xi))/...
    norm(cross(normal, xi))^3 -...
    (cross(dnormal_xu(u2), xi)*...
     dot(cross(normal, xi), cross(dnormal_xu(u1), xi))/...
     norm(cross(normal, xi))^3 +...
     cross(normal, xi)*...
     dot(cross(dnormal_xu(u2), xi), cross(dnormal_xu(u1), xi))/...
     norm(cross(normal, xi))^3 +...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(d2_normal_xu(u1, u2), xi))/...
     norm(cross(normal, xi))^3 -...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(dnormal_xu(u1), xi))*...
     3*dot(cross(normal, xi), cross(dnormal_xu(u2), xi))/...
     norm(cross(normal, xi))^5);
end
% Hessian of 'normal' with respect to 'xi' 
% along directions 'u1' and 'u2'
function mat = d2_normal_xu(u1, u2)
%{
 dnormal_xu = u1*(sin(theta)/norm(xi + x)) -...
   (xi + x)*dot(xi + x, u1)*(sin(theta)/norm(xi + x)^3) +...
   cross(xi, u1)*(cos(theta)/norm(cross(xi, x))) -...
   cross(xi, x)*dot(cross(xi, x), cross(xi, u1))*...
   (cos(theta)/norm(cross(xi, x))^3;  
%}
mat = -u1*dot(xi + x, u2)*(sin(theta)/norm(xi + x)) -...% the second term
    (u2*dot(xi + x, u1)*(sin(theta)/norm(xi + x)^3) +...
     (xi + x)*dot(u2, u1)*(sin(theta)/norm(xi + x)^3) -...
     (xi + x)*dot(xi + x, u1)*3*dot(xi + x, u2)*...
     (sin(theta)/norm(xi + x)^5)) -...% the third term
    cross(xi, u1)*dot(cross(xi, x), cross(xi, u2))*...
    (cos(theta)/norm(cross(xi, x))^3) -...% the final term
    (cross(xi, u2)*dot(cross(xi, x), cross(xi, u1))*...
     (cos(theta)/norm(cross(xi, x))^3) +...
     cross(xi, x)*dot(cross(xi, u2), cross(xi, u1))*...
     (cos(theta)/norm(cross(xi, x))^3) -...
     cross(xi, x)*dot(cross(xi, x), cross(xi, u1))*...
     3*dot(cross(xi, x), cross(xi, u2))*...
     (cos(theta)/norm(cross(xi, x))^5));
end
% hessians of 'v1', 'v2', and 'v1'
% with respect to 'x' 
% along directions 'u1' and 'u2' correspondingly
function matu = d2_v3_xu(u1, u2)
% dv3_xiu = dv3_alpha*dalpha_xiu(u1) + dv3_phi*dphi_xiu(u1);
 matu = dv3_alpha*d2_alpha_xu(u1, u2) +...
    d2v3_alphaalpha*dalpha_xu(u2)*dalpha_xu(u1) +...
    d2v3_alphaphi*(dphi_xu(u2)*dalpha_xu(u1) +...
    dalpha_xu(u2)*dphi_xu(u1)) +...
    d2v3_phiphi*dphi_xu(u2)*dphi_xu(u1) +...
    dv3_phi*d2_phi_xu(u1, u2);
end
function matu = d2_v2_xu(u1, u2)
% dv2_xiu = dv2_alpha*dalpha_xiu(u1) + dv2_phi*dphi_xiu(u1);
 matu = dv2_alpha*d2_alpha_xu(u1, u2) +...
    d2v2_alphaalpha*dalpha_xu(u2)*dalpha_xu(u1) +...
    d2v2_alphaphi*(dphi_xu(u2)*dalpha_xu(u1) +...
    dalpha_xu(u2)*dphi_xu(u1)) +...
    d2v2_phiphi*dphi_xu(u2)*dphi_xu(u1) +...
    dv2_phi*d2_phi_xu(u1, u2);
end
function matu = d2_v1_xu(u1, u2)
% dv1_xiu = dv1_alpha*dalpha_xiu(u1) + dv1_phi*dphi_xiu(u1);
 matu = dv1_alpha*d2_alpha_xu(u1, u2) +...
    d2v1_alphaalpha*dalpha_xu(u2)*dalpha_xu(u1) +...
    d2v1_alphaphi*(dphi_xu(u2)*dalpha_xu(u1) +...
    dalpha_xu(u2)*dphi_xu(u1)) +...
    d2v1_phiphi*dphi_xu(u2)*dphi_xu(u1) +...
    dv1_phi*d2_phi_xu(u1, u2);
end
% Hessian of alpha and phi with respect 'x' 
% along directions 'u1' and 'u2' respectfully
function matu = d2_alpha_xu(u1, u2)
%{
  dalpha_xiu = -sin(theta)*dot(u1, x)/...
    (4*(Xix/2 + 1/2)^(1/2)*(1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2))
%}    
 matu = (-(sin(theta)*(sin(theta)^2*(Xix/2 + 1/2) - 1) +...
    sin(theta)^3*(Xix/2 + 1/2))/(16*(Xix/2 + 1/2)^(3/2)*...
    (1 - sin(theta)^2*(Xix/2 + 1/2))^(3/2)))*...
    dot(xi, u2)*dot(xi, u1);
end
function matu = d2_phi_xu(u1, u2)
%{    
  dphi_xiu = -(2*sin(theta)^2 - 2)*dot(u1, x)/...
    ((1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));  
 %}
 matu = (((2*sin(theta)^2 - 2)*(cos(2*theta) + 1)*...
    (3*Xix - cos(2*theta) + 2*Xix^2*cos(2*theta) -...
    2*Xix^2 + Xix*cos(2*theta) + 1))/...
    (4*(1 - sin(theta)^2)^(3/2)*(1 - Xix)^(3/2)*(Xix + 1)^(3/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2)^2))*...
    dot(xi, u2)*dot(xi, u1);
end
% differential of 'v' with respect to 'x'
% along the direction 'u1'
function matu = dv_xu(u1)
% v = v1*e1 + v2*e2 + v3*normal;
 matu = e1*dv1_xu(u1) + e2*dv2_xu(u1) + normal*dv3_xu(u1) +...
      + v1*de1_xu(u1) + v2*de2_xu(u1) + v3*dnormal_xu(u1);
end
% differentials of 'v1', 'v2', and 'v3' with respect to 'x' 
% along the direction 'u1'
function matu = dv3_xu(u1)
 matu = dv3_alpha*dalpha_xu(u1) + dv3_phi*dphi_xu(u1);
end
function matu = dv2_xu(u1)
 matu = dv2_alpha*dalpha_xu(u1) + dv2_phi*dphi_xu(u1);
end
function matu = dv1_xu(u1)
 matu = dv1_alpha*dalpha_xu(u1) + dv1_phi*dphi_xu(u1);
end
% differentials of 'alpha', and 'phi' with respect to 'xi'
% along the direction 'u1'
function matu = dalpha_xu(u1)
 matu = -sin(theta)*dot(xi, u1)/...
    (4*(Xix/2 + 1/2)^(1/2)*(1 - sin(theta)^2*(Xix/2 + 1/2))^(1/2)); 
end
function matu = dphi_xu(u1)
 matu = -(2*sin(theta)^2 - 2)*dot(xi, u1)/...
    ((1 - sin(theta)^2)^(1/2)*(1 - Xix)^(1/2)*(Xix + 1)^(1/2)*...
    (sin(theta)^2 + Xix*sin(theta)^2 - 2));
end
% derivative and differential of 'e2' and 'e1' 
% with respect to 'theta' and 'x' 
% along the direction 'u1'
%
function matu = de1_xu(u1)
 if (dot(cross(cross(normal, xi), normal), xi) > 0)
  matu = cross(dee2_xu(u1), normal) + cross(ee2, dnormal_xu(u1));
 else
  matu = -cross(dee2_xu(u1), normal) - cross(ee2, dnormal_xu(u1));
 end
end
%}
%
function matu = de2_xu(u1)
 if (dot(cross(normal, xi), dbeta0) > 0)
   matu = dee2_xu(u1);
 else
   matu = -dee2_xu(u1);
 end
end
%}
% differential of 'ee2' with respect to 'xi'
% along the direction 'u1'
%
function matu = dee2_xu(u1)
 % ee2 = cross(normal, xi)/norm(cross(normal, xi));
 matu = cross(dnormal_xu(u1), xi)/norm(cross(normal, xi)) -...
     cross(normal, xi)*...
     dot(cross(normal, xi), cross(dnormal_xu(u1), xi))/...
     norm(cross(normal, xi))^3;   
end
%}
% differential of 'normal' with respect to 'xi'
% along the direction 'u1'
%
function matu = dnormal_xu(u1)
 %{
 normal = (xi + x)*sin(theta)/norm(xi + x) +...
     cross(xi, x)*cos(theta)/norm(cross(xi, x));
   %}
 matu = u1*sin(theta)/norm(xi + x) -...
     (xi + x)*dot(xi + x, u1)*sin(theta)/norm(xi + x)^3 +...
     cross(xi, u1)*cos(theta)/norm(cross(xi, x)) -...
     cross(xi, x)*dot(cross(xi, x), cross(xi, u1))*...
     cos(theta)/norm(cross(xi, x))^3;   
end
%}
end